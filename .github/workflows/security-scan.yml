name: Security Scan and DefectDojo Upload

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  security-scan:
    runs-on: ubuntu-latest

    services:
      zap:
        image: owasp/zap2docker-stable
        ports:
          - 8080:8080
        options: >-
          --name zap
          --user root
          --entrypoint /bin/bash
          -c "zap.sh -daemon -host 0.0.0.0 -port 8080 -config api.addrs.addr.name=.* -config api.addrs.addr.regex=true"

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Start FastAPI server
      run: |
        python -m uvicorn main:app --host 0.0.0.0 --port 8000 &
        sleep 10
        curl -f http://localhost:8000/health

    - name: Wait for ZAP to be ready
      run: |
        timeout 60 bash -c 'until curl -f http://localhost:8080/JSON/core/view/version/; do sleep 2; done'

    - name: Run security scans
      run: |
        make bandit
        make pip-audit
        make ruff

    - name: Run ZAP DAST scan
      run: |
        # Use ZAP baseline scan for faster CI execution
        curl -X GET "http://localhost:8080/JSON/spider/action/scan/?url=http://host.docker.internal:8000&maxChildren=10" || true
        sleep 30
        curl -X GET "http://localhost:8080/JSON/ascan/action/scan/?url=http://host.docker.internal:8000&recurse=true&inScopeOnly=false" || true
        sleep 60
        # Generate reports
        mkdir -p reports
        curl "http://localhost:8080/OTHER/core/other/xmlreport/" > reports/zap-report.xml
        curl "http://localhost:8080/OTHER/core/other/jsonreport/" > reports/zap-report.json
        curl "http://localhost:8080/OTHER/core/other/htmlreport/" > reports/zap-report.html

    - name: Upload to DefectDojo
      env:
        DEFECTDOJO_API_KEY: ${{ secrets.DEFECTDOJO_API_KEY }}
        DD_HOST: ${{ vars.DD_HOST || 'https://demo.defectdojo.org' }}
        DD_PRODUCT_NAME: ${{ github.repository }}
        DD_ENGAGEMENT_NAME: "Security Scan"
        DD_USER_ID: ${{ vars.DD_USER_ID || '1' }}
      run: |
        python defect.py
      continue-on-error: true

    - name: Upload scan reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports
        path: reports/
        retention-days: 30

    - name: Generate PR comment
      if: github.event_name == 'pull_request'
      run: |
        python generate_pr_output.py comment reports/pytest-results.json reports/pip-audit-report.json reports/bandit-report.json reports/zap-report.json || true
